---
- name: Check if Kubernetes deployment is enabled
  fail:
    msg: "Kubernetes deployment is disabled in user_input.yml"
  when: not kubernetes_deployment.enabled | default(false)

- name: Check if Python requirements are already installed
  command: pip3 show ansible
  register: pip_check
  ignore_errors: true
  changed_when: false
  when: kubernetes_deployment.enabled | default(false)

- name: Install Python requirements
  block:
    - name: Run requirements installation script
      command: "{{ playbook_dir }}/files/install-requirements.sh"
      register: install_output
  become: true
  when: 
    - kubernetes_deployment.enabled | default(false)
    - pip_check.rc != 0

- name: Display current working directory
  command: pwd
  register: current_dir
  changed_when: false

- name: Show inventory file contents
  command: cat {{ inventory_dir }}/kubespray/inventory.ini
  register: inventory_contents
  changed_when: false

- name: Display debug information
  debug:
    msg: |
      Current Directory: {{ current_dir.stdout }}
      Inventory Path: {{ inventory_dir }}/kubespray/inventory.ini
      Kubespray Dir: {{ kubespray_dir }}
      Group Vars Path: {{ inventory_dir }}/kubespray/group_vars/all/all.yml

- name: Check if local Kubespray exists
  stat:
    path: "{{ kubespray_dir }}"
  register: kubespray_stat
  when: kubernetes_deployment.enabled | default(false)

- name: Create Kubespray directory if it doesn't exist
  file:
    path: "{{ kubespray_dir }}"
    state: directory
    mode: '0755'
  when: not kubespray_stat.stat.exists and kubernetes_deployment.enabled | default(false)

- name: Create Kubespray inventory directory
  file:
    path: "{{ inventory_dir }}/kubespray"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false)

- name: Copy Kubespray sample inventory directory (excluding inventory.ini and group_vars)
  synchronize:
    src: "{{ kubespray_dir }}/inventory/sample/"
    dest: "{{ inventory_dir }}/kubespray"
    delete: no
    recursive: yes
    rsync_opts:
      - "--exclude=inventory.ini"
      - "--exclude=group_vars/"
      - "--exclude=group_vars"
  when: kubernetes_deployment.enabled | default(false)

# - name: Generate Kubespray inventory (DISABLED - using pre-generated inventory from setup_kubernetes.sh)
#   template:
#     src: inventory.ini.j2
#     dest: "{{ inventory_dir }}/kubespray/inventory.ini"
#   vars:
#     k8s_masters: "{{ kubernetes_deployment.control_plane_nodes | default([]) }}"
#     k8s_workers: "{{ kubernetes_deployment.worker_nodes | default([]) }}"
#   when: kubernetes_deployment.enabled | default(false)

- name: Verify pre-generated inventory file exists
  stat:
    path: "{{ inventory_dir }}/kubespray/inventory.ini"
  register: inventory_file_check
  when: kubernetes_deployment.enabled | default(false)

- name: Fail if inventory file not found
  fail:
    msg: "Inventory file not found at {{ inventory_dir }}/kubespray/inventory.ini. Please run setup_kubernetes.sh first to generate the inventory."
  when: 
    - kubernetes_deployment.enabled | default(false)
    - not inventory_file_check.stat.exists

- name: Verify inventory file contents (should show generated nodes, not sample)
  command: head -15 {{ inventory_dir }}/kubespray/inventory.ini
  register: final_inventory_contents
  changed_when: false
  when: kubernetes_deployment.enabled | default(false)

- name: Display final inventory being used
  debug:
    msg: |
      Final inventory content being used for deployment:
      {{ final_inventory_contents.stdout }}
  when: kubernetes_deployment.enabled | default(false)

- name: Ensure group_vars directory exists
  file:
    path: "{{ inventory_dir }}/kubespray/group_vars"
    state: directory
    mode: '0755'
  when: kubernetes_deployment.enabled | default(false)

# DISABLED: setup_kubernetes.sh already handles group_vars generation with custom templates
# - name: Copy group_vars from Kubespray (only if not exists)
#   command: "cp -rf {{ kubespray_dir }}/inventory/sample/group_vars {{ inventory_dir }}/kubespray/"
#   args:
#     creates: "{{ inventory_dir }}/kubespray/group_vars/all"
#   when: kubernetes_deployment.enabled | default(false)

- name: Verify group_vars were generated by setup_kubernetes.sh
  stat:
    path: "{{ inventory_dir }}/kubespray/group_vars/all/all.yml"
  register: group_vars_check
  when: kubernetes_deployment.enabled | default(false)

- name: Verify k8s-cluster.yml was generated by setup_kubernetes.sh
  stat:
    path: "{{ inventory_dir }}/kubespray/group_vars/k8s_cluster/k8s-cluster.yml"
  register: k8s_cluster_check
  when: kubernetes_deployment.enabled | default(false)

- name: Fail if group_vars not found
  fail:
    msg: "Group vars not found. Please run setup_kubernetes.sh first to generate the required configuration files."
  when: 
    - kubernetes_deployment.enabled | default(false)
    - not group_vars_check.stat.exists

- name: Fail if k8s-cluster.yml not found
  fail:
    msg: "k8s-cluster.yml not found. Please run setup_kubernetes.sh first to generate the required configuration files."
  when: 
    - kubernetes_deployment.enabled | default(false)
    - not k8s_cluster_check.stat.exists

- name: Verify custom group_vars are preserved (not overwritten by sample)
  shell: |
    if grep -q "automatically generated by setup_kubernetes.sh" {{ inventory_dir }}/kubespray/group_vars/all/all.yml 2>/dev/null; then
      echo "✓ Custom group_vars preserved"
    elif grep -q "bin_dir: /usr/local/bin" {{ inventory_dir }}/kubespray/group_vars/all/all.yml 2>/dev/null; then
      echo "✗ WARNING: Using default Kubespray group_vars instead of custom ones"
      exit 1
    else
      echo "? Group vars file exists but format unknown"
    fi
  register: group_vars_verification
  when: 
    - kubernetes_deployment.enabled | default(false)
    - group_vars_check.stat.exists
  ignore_errors: true

- name: Verify custom k8s-cluster.yml is preserved (not overwritten by sample)
  shell: |
    if grep -q "automatically generated by setup_kubernetes.sh" {{ inventory_dir }}/kubespray/group_vars/k8s_cluster/k8s-cluster.yml 2>/dev/null; then
      echo "✓ Custom k8s-cluster.yml preserved"
    elif grep -q "supplementary_addresses_in_ssl_keys" {{ inventory_dir }}/kubespray/group_vars/k8s_cluster/k8s-cluster.yml 2>/dev/null; then
      echo "✓ Custom k8s-cluster.yml with SSL SAN config found"
    elif grep -q "kube_config_dir: /etc/kubernetes" {{ inventory_dir }}/kubespray/group_vars/k8s_cluster/k8s-cluster.yml 2>/dev/null; then
      echo "✗ WARNING: Using default Kubespray k8s-cluster.yml instead of custom one"
      exit 1
    else
      echo "? k8s-cluster.yml file exists but format unknown"
    fi
  register: k8s_cluster_verification
  when: 
    - kubernetes_deployment.enabled | default(false)
    - k8s_cluster_check.stat.exists
  ignore_errors: true

- name: Display group_vars verification result
  debug:
    msg: "Group vars verification: {{ group_vars_verification.stdout | default('Verification skipped') }}"
  when: 
    - kubernetes_deployment.enabled | default(false)
    - group_vars_verification is defined

- name: Display k8s-cluster.yml verification result
  debug:
    msg: "k8s-cluster.yml verification: {{ k8s_cluster_verification.stdout | default('Verification skipped') }}"
  when: 
    - kubernetes_deployment.enabled | default(false)
    - k8s_cluster_verification is defined

- name: Fail if custom group_vars were overwritten
  fail:
    msg: |
      CRITICAL ERROR: Custom group_vars generated by setup_kubernetes.sh have been overwritten!
      
      This means the synchronize task copied default Kubespray group_vars over your custom configuration.
      Your deployment will fail or use incorrect settings.
      
      Please:
      1. Check that setup_kubernetes.sh completed successfully
      2. Verify the synchronize task excludes group_vars directory
      3. Re-run setup_kubernetes.sh to regenerate custom group_vars
  when: 
    - kubernetes_deployment.enabled | default(false)
    - group_vars_verification is defined
    - group_vars_verification.rc != 0

- name: Fail if custom k8s-cluster.yml was overwritten
  fail:
    msg: |
      CRITICAL ERROR: Custom k8s-cluster.yml generated by setup_kubernetes.sh has been overwritten!
      
      This will cause SSL certificate validation errors like:
      "apiServer.certSANs: Invalid value: \"\": altname is not a valid IP address"
      
      The custom k8s-cluster.yml contains critical SSL SAN configuration.
      
      Please:
      1. Check that setup_kubernetes.sh completed successfully
      2. Verify the synchronize task excludes group_vars directory
      3. Re-run setup_kubernetes.sh to regenerate custom k8s-cluster.yml
  when: 
    - kubernetes_deployment.enabled | default(false)
    - k8s_cluster_verification is defined
    - k8s_cluster_verification.rc != 0

- name: Setup firewall and prerequisites
  block:
    - name: Setup firewall prerequisites
      include_tasks: firewall_prerequisites.yml
  become: true
  when: kubernetes_deployment.enabled | default(false)

- name: Deploy Kubernetes cluster
  include_tasks: deploy_kubernetes.yml
  when: deploy_kubernetes | default(true) | bool and kubernetes_deployment.enabled | default(false)

# Post-deployment tasks that require a running Kubernetes cluster
- name: Wait for Kubernetes API to be available on first control plane node
  wait_for:
    host: "{{ kubernetes_deployment.control_plane_nodes[0].ansible_host }}"
    port: "{{ kubernetes_deployment.api_server.port }}"
    timeout: 300
  when: 
    - kubernetes_deployment.enabled | default(false)
    - deploy_kubernetes | default(true) | bool
  delegate_to: localhost
  run_once: true

- name: Configure NVIDIA runtime and firewall
  block:
    - name: Configure NVIDIA runtime firewall rules
      include_tasks: firewall_config.yml
      register: firewall_config_result
      when:
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - deploy_kubernetes | default(true) | bool

    - name: Track successful firewall configuration
      include_tasks: "{{ playbook_dir }}/tasks/summary_tracker.yml"
      vars:
        item_name: "nvidia-firewall-config"
        item_type: "kubernetes"
        item_details: "NVIDIA firewall rules configured successfully"
      when: 
        - summary_enabled | default(true)
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - firewall_config_result is succeeded

    - name: Track failed firewall configuration
      include_tasks: "{{ playbook_dir }}/tasks/summary_tracker.yml"
      vars:
        item_name: "nvidia-firewall-config"
        item_type: "kubernetes"
        item_error: "{{ firewall_config_result.msg | default('Firewall configuration failed') }}"
        item_details: "NVIDIA firewall rules setup failed"
      when: 
        - summary_enabled | default(true)
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - firewall_config_result is failed

    - name: Configure NVIDIA runtime
      include_tasks: nvidia_runtime_config.yml
      register: nvidia_runtime_result
      when:
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - deploy_kubernetes | default(true) | bool

    - name: Track successful NVIDIA runtime configuration
      include_tasks: "{{ playbook_dir }}/tasks/summary_tracker.yml"
      vars:
        item_name: "nvidia-runtime-config"
        item_type: "kubernetes"
        item_details: "NVIDIA runtime configured successfully"
      when: 
        - summary_enabled | default(true)
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - nvidia_runtime_result is succeeded

    - name: Track failed NVIDIA runtime configuration
      include_tasks: "{{ playbook_dir }}/tasks/summary_tracker.yml"
      vars:
        item_name: "nvidia-runtime-config"
        item_type: "kubernetes"
        item_error: "{{ nvidia_runtime_result.msg | default('NVIDIA runtime configuration failed') }}"
        item_details: "NVIDIA container runtime setup failed"
      when: 
        - summary_enabled | default(true)
        - kubernetes_deployment.nvidia_runtime.enabled | default(false)
        - nvidia_runtime_result is failed
  become: true
  when: kubernetes_deployment.enabled | default(false) 