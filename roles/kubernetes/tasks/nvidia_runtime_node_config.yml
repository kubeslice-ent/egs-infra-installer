---
# Check NVIDIA Container Toolkit first
- name: Check if NVIDIA Container Runtime is installed
  command: which nvidia-container-runtime
  register: nvidia_runtime_check
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ target_node.ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ target_node.ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
  environment:
    LC_ALL: C.UTF-8
    LANG: C.UTF-8

- name: Install NVIDIA Container Toolkit
  block:
    - name: Install required packages for repository setup
      apt:
        name: 
          - curl
          - gnupg
          - ca-certificates
        state: present
        update_cache: yes
      delegate_to: "{{ target_node.ansible_host }}"

    - name: Create keyrings directory
      file:
        path: /usr/share/keyrings
        state: directory
        mode: '0755'
      delegate_to: "{{ target_node.ansible_host }}"

    - name: Download and add NVIDIA GPG key to keyring
      shell: |
        curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
      args:
        creates: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
      delegate_to: "{{ target_node.ansible_host }}"

    - name: Configure NVIDIA repository
      shell: |
        curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
        sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
        tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
      args:
        creates: /etc/apt/sources.list.d/nvidia-container-toolkit.list
      delegate_to: "{{ target_node.ansible_host }}"

    - name: Update apt cache
      apt:
        update_cache: yes
      delegate_to: "{{ target_node.ansible_host }}"
    
    - name: Install NVIDIA Container Toolkit
      apt:
        name: nvidia-container-toolkit
        state: present
      delegate_to: "{{ target_node.ansible_host }}"
  when: nvidia_runtime_check.rc != 0
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ target_node.ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
  environment:
    LC_ALL: C.UTF-8
    LANG: C.UTF-8

# Configure containerd
- name: Ensure containerd config directory exists
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'
  delegate_to: "{{ target_node.ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ target_node.ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
  environment:
    LC_ALL: C.UTF-8
    LANG: C.UTF-8

- name: Check if containerd config exists
  stat:
    path: /etc/containerd/config.toml
  register: config_stat
  delegate_to: "{{ target_node.ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ target_node.ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
  environment:
    LC_ALL: C.UTF-8
    LANG: C.UTF-8

- name: Generate default containerd config if not exists
  shell: containerd config default | tee /etc/containerd/config.toml > /dev/null
  when: not config_stat.stat.exists
  delegate_to: "{{ target_node.ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ target_node.ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
  environment:
    LC_ALL: C.UTF-8
    LANG: C.UTF-8

- name: Check if NVIDIA runtime is already configured
  shell: |
    if grep -q "plugins.*containerd.runtimes.nvidia" /etc/containerd/config.toml; then
      echo "NVIDIA runtime already configured"
      exit 0
    else
      echo "NVIDIA runtime not configured"
      exit 1
    fi
  register: nvidia_grep
  ignore_errors: true
  changed_when: false
  delegate_to: "{{ target_node.ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ target_node.ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
  environment:
    LC_ALL: C.UTF-8
    LANG: C.UTF-8

- name: Create temporary containerd config
  template:
    src: containerd-config.toml.j2
    dest: /tmp/containerd-config.toml
  delegate_to: "{{ target_node.ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ target_node.ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
  when: nvidia_grep.rc != 0

- name: Apply containerd config
  copy:
    src: /tmp/containerd-config.toml
    dest: /etc/containerd/config.toml
    remote_src: yes
    mode: '0644'
  delegate_to: "{{ target_node.ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ target_node.ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
  when: nvidia_grep.rc != 0
  notify: Restart containerd

- name: Remove temporary containerd config
  file:
    path: /tmp/containerd-config.toml
    state: absent
  delegate_to: "{{ target_node.ansible_host }}"
  vars:
    ansible_ssh_private_key_file: "{{ kubernetes_deployment.ssh_key_path }}"
    ansible_user: "{{ target_node.ansible_user | default(kubernetes_deployment.default_ansible_user) }}"
  when: nvidia_grep.rc != 0

# Add status messages
- name: Display NVIDIA Container Toolkit check status
  debug:
    msg: "{{ 'NVIDIA Container Toolkit is already installed.' if nvidia_runtime_check.rc == 0 else 'NVIDIA Container Toolkit is not installed. Installing...' }}"

- name: Display containerd config status
  debug:
    msg: "{{ 'Containerd config file not found. Creating default config...' if not config_stat.stat.exists else 'Containerd config file exists.' }}"
  when: config_stat is defined

- name: Display NVIDIA runtime configuration status
  debug:
    msg: "{{ nvidia_grep.stdout if nvidia_grep.rc == 0 else 'Adding NVIDIA runtime to containerd config...' }}"
  when: nvidia_grep is defined 