---
###############################################################################
# KUBESPRAY GROUP VARIABLES - DYNAMICALLY GENERATED FROM user_input.yml
# This file is automatically generated by setup_kubernetes.sh
###############################################################################

## Directory where the binaries will be installed
bin_dir: /usr/local/bin

## Cluster Configuration
cluster_name: cluster.local

## Container Runtime Configuration
container_manager: {{ kubernetes_deployment.container_runtime | default('containerd') }}

## Cgroup Driver Configuration
# CRITICAL: Both containerd and kubelet must use the same cgroup driver
# Using systemd cgroup driver for proper resource management
containerd_use_systemd_cgroup: true
kubelet_cgroup_driver: systemd

## Control Plane and System Component Tolerations
# Add custom tolerations to control plane components via kubeadm patches
{% if kubernetes_deployment.control_plane.get('tolerations', []) | length > 0 %}
kubeadm_patches:
{% for component in ['kube-apiserver', 'kube-controller-manager', 'kube-scheduler', 'etcd'] %}
  - target: {{ component }}
    type: strategic
    patch:
      spec:
        tolerations:
{% for toleration in kubernetes_deployment.control_plane.tolerations %}
          - key: {{ toleration.key }}
            value: {{ toleration.value }}
            effect: {{ toleration.effect }}
{% endfor %}
{% endfor %}

# Add tolerations to CoreDNS (and other DNS components)
dns_extra_tolerations:
{% for toleration in kubernetes_deployment.control_plane.tolerations %}
  - key: {{ toleration.key }}
    value: {{ toleration.value }}
    effect: {{ toleration.effect }}
{% endfor %}
{% endif %}

## Network Configuration
kube_network_plugin: {{ kubernetes_deployment.network_plugin | default('calico') }}
kube_service_addresses: {{ kubernetes_deployment.network_config.service_subnet | default('10.233.0.0/18') }}
kube_pods_subnet: {{ kubernetes_deployment.network_config.pod_subnet | default('10.233.64.0/18') }}
kube_network_node_prefix: {{ kubernetes_deployment.network_config.node_prefix | default(24) }}

## IPv4/IPv6 Stack Configuration
# Force IPv4-only stack - disable IPv6 to ensure all components use IPv4 only
ipv4_stack: {{ kubernetes_deployment.network_config.get('ipv4_stack', true) }}
ipv6_stack: {{ kubernetes_deployment.network_config.get('ipv6_stack', false) }}

# Disable IPv6 system-wide on all nodes (OS level)
disable_ipv6_system_wide: {{ kubernetes_deployment.network_config.get('disable_ipv6_system_wide', true) }}

# Bind address configuration - use private IP to avoid dual-stack issues
{% set bind_mode = kubernetes_deployment.api_server.get('bind_address_mode', 'private_ip') -%}
{% if bind_mode == 'private_ip' -%}
kube_apiserver_bind_address: "{{ '{{' }} ansible_default_ipv4.address {{ '}}' }}"
kube_controller_manager_bind_address: "{{ '{{' }} ansible_default_ipv4.address {{ '}}' }}"
kube_scheduler_bind_address: "{{ '{{' }} ansible_default_ipv4.address {{ '}}' }}"
kubelet_bind_address: "{{ '{{' }} ansible_default_ipv4.address {{ '}}' }}"
kube_proxy_bind_address: "{{ '{{' }} ansible_default_ipv4.address {{ '}}' }}"
{% else -%}
kube_apiserver_bind_address: "0.0.0.0"
kube_controller_manager_bind_address: "0.0.0.0"
kube_scheduler_bind_address: "0.0.0.0"
kubelet_bind_address: "0.0.0.0"
kube_proxy_bind_address: "0.0.0.0"
{% endif -%}

## DNS Configuration
dns_mode: {{ kubernetes_deployment.dns_mode | default('coredns') }}
resolvconf_mode: host_resolvconf

## API Server Configuration
# Certificate SAN (Subject Alternative Names) Configuration
# CRITICAL: This fixes the "x509: certificate is valid for ... not 0.0.0.0" error
# Certificate SAN configuration moved to group_vars/k8s_cluster/k8s-cluster.yml

## Load Balancer Configuration
{% if kubernetes_deployment.load_balancer.enabled and kubernetes_deployment.load_balancer.type == "localhost" and kubernetes_deployment.load_balancer.localhost.enabled and kubernetes_deployment.load_balancer.localhost.lb_type != "none" -%}
# Localhost Load Balancer Configuration (Single or Multi-Master)
loadbalancer_apiserver_localhost: true
loadbalancer_apiserver_type: {{ kubernetes_deployment.load_balancer.localhost.lb_type | default('nginx') }}

# Load balancer configuration - listens on client-facing port
{% set client_port = kubernetes_deployment.api_server.port | default(6443) -%}
{% set api_port_offset = kubernetes_deployment.load_balancer.localhost.api_port_offset | default(1) -%}
{% set api_server_port = client_port + api_port_offset -%}

# Load balancer port configuration
loadbalancer_apiserver_port: {{ client_port }}
# Client connection address (0.0.0.0 included in certificate)
loadbalancer_apiserver_address: "{{ kubernetes_deployment.load_balancer.localhost.bind_address | default('0.0.0.0') }}"
{% if kubernetes_deployment.load_balancer.localhost.lb_type == 'haproxy' -%}
# HAProxy bind configuration (can bind to 0.0.0.0 for all interfaces)
haproxy_bind_address: "{{ kubernetes_deployment.load_balancer.localhost.bind_address | default('0.0.0.0') }}"
{% else -%}
# Nginx bind configuration (can bind to 0.0.0.0 for all interfaces)  
nginx_bind_address: "{{ kubernetes_deployment.load_balancer.localhost.bind_address | default('0.0.0.0') }}"
{% endif -%}

# API Server - binds to backend port to avoid conflict with load balancer
kube_apiserver_port: {{ api_server_port }}

# Backend configuration for load balancer
{% if kubernetes_deployment.load_balancer.localhost.lb_type == 'haproxy' -%}
haproxy_kube_apiserver_port: {{ api_server_port }}
{% else -%}
nginx_kube_apiserver_port: {{ api_server_port }}
nginx_upstream_port: {{ api_server_port }}
{% endif -%}

# Health check configuration
loadbalancer_apiserver_healthcheck_port: {{ kubernetes_deployment.load_balancer.localhost.healthcheck_port | default(8081) }}

# Performance and resource settings
loadbalancer_apiserver_keepalive_timeout: {{ kubernetes_deployment.load_balancer.localhost.keepalive_timeout | default('5m') }}
loadbalancer_apiserver_memory_requests: {{ kubernetes_deployment.load_balancer.localhost.memory_requests | default('32M') }}
loadbalancer_apiserver_cpu_requests: {{ kubernetes_deployment.load_balancer.localhost.cpu_requests | default('25m') }}

# Load balancer pod naming
{% if kubernetes_deployment.load_balancer.localhost.lb_type == 'nginx' -%}
loadbalancer_apiserver_pod_name: {{ kubernetes_deployment.load_balancer.localhost.pod_name | default('nginx-proxy') }}
{% elif kubernetes_deployment.load_balancer.localhost.lb_type == 'haproxy' -%}
loadbalancer_apiserver_pod_name: {{ kubernetes_deployment.load_balancer.localhost.pod_name | default('haproxy') }}
{% else -%}
loadbalancer_apiserver_pod_name: {{ kubernetes_deployment.load_balancer.localhost.pod_name | default('nginx-proxy') }}
{% endif -%}
{% elif kubernetes_deployment.load_balancer.enabled and kubernetes_deployment.load_balancer.type == "external" and kubernetes_deployment.load_balancer.external.enabled -%}
# External Load Balancer Configuration
loadbalancer_apiserver_localhost: false
loadbalancer_apiserver:
  address: {{ kubernetes_deployment.load_balancer.external.address | default(kubernetes_deployment.api_server.host) }}
  port: {{ kubernetes_deployment.api_server.port | default(6443) }}
{% if kubernetes_deployment.load_balancer.external.domain_name -%}
apiserver_loadbalancer_domain_name: {{ kubernetes_deployment.load_balancer.external.domain_name }}
{% endif -%}
# API server configuration for external load balancer (uses same port as external LB)
kube_apiserver_port: {{ kubernetes_deployment.api_server.port | default(6443) }}
{% elif kubernetes_deployment.load_balancer.enabled and kubernetes_deployment.load_balancer.type == "kube-vip" and kubernetes_deployment.load_balancer.kube_vip.enabled -%}
# kube-vip Configuration
kube_vip_controlplane_enabled: {{ kubernetes_deployment.load_balancer.kube_vip.controlplane_enabled | default(true) | lower }}
kube_vip_address: {{ kubernetes_deployment.load_balancer.kube_vip.vip_address | default(kubernetes_deployment.api_server.host) }}
kube_vip_interface: {{ kubernetes_deployment.load_balancer.kube_vip.interface | default('eth0') }}
kube_vip_arp_enabled: {{ kubernetes_deployment.load_balancer.kube_vip.arp_enabled | default(true) | lower }}
kube_vip_leader_election_enabled: {{ kubernetes_deployment.load_balancer.kube_vip.leader_election | default(true) | lower }}
kube_vip_cidr: {{ kubernetes_deployment.load_balancer.kube_vip.cidr | default(24) }}
loadbalancer_apiserver_localhost: false
# API server configuration for kube-vip
kube_apiserver_port: {{ kubernetes_deployment.api_server.port | default(6443) }}
{% else -%}
# Load Balancer Disabled: Direct API server access
loadbalancer_apiserver_localhost: false
# API server configuration from user_input.yml with defaults
kube_apiserver_port: {{ kubernetes_deployment.api_server.port | default(6443) }}
{% endif %}

## etcd Configuration
{% if kubernetes_deployment.etcd_ha.enabled -%}
etcd_deployment_type: {{ kubernetes_deployment.etcd_ha.deployment_type | default('kubeadm') }}
{% if kubernetes_deployment.etcd_ha.events_cluster.enabled -%}
etcd_events_cluster_setup: {{ kubernetes_deployment.etcd_ha.events_cluster.setup | default(true) | lower }}
etcd_events_cluster_enabled: {{ kubernetes_deployment.etcd_ha.events_cluster.enabled | default(true) | lower }}
{% endif -%}

# etcd Cluster Configuration
{% if kubernetes_deployment.etcd_ha.cluster -%}
{% if kubernetes_deployment.etcd_ha.cluster.heartbeat_interval -%}
etcd_heartbeat_interval: {{ kubernetes_deployment.etcd_ha.cluster.heartbeat_interval }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.cluster.election_timeout -%}
etcd_election_timeout: {{ kubernetes_deployment.etcd_ha.cluster.election_timeout }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.cluster.quota_backend_bytes -%}
etcd_quota_backend_bytes: {{ kubernetes_deployment.etcd_ha.cluster.quota_backend_bytes }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.cluster.auto_compaction_retention -%}
etcd_compaction_retention: {{ kubernetes_deployment.etcd_ha.cluster.auto_compaction_retention }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.cluster.max_request_bytes -%}
etcd_max_request_bytes: {{ kubernetes_deployment.etcd_ha.cluster.max_request_bytes }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.cluster.metrics -%}
etcd_metrics: {{ kubernetes_deployment.etcd_ha.cluster.metrics }}
{% endif -%}
{% endif -%}

# etcd Security Configuration
{% if kubernetes_deployment.etcd_ha.security -%}
{% if kubernetes_deployment.etcd_ha.security.peer_auto_tls is defined -%}
etcd_peer_auto_tls: {{ kubernetes_deployment.etcd_ha.security.peer_auto_tls | lower }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.security.client_cert_auth is defined -%}
etcd_client_cert_auth: {{ kubernetes_deployment.etcd_ha.security.client_cert_auth | lower }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.security.peer_cert_auth is defined -%}
etcd_peer_cert_auth: {{ kubernetes_deployment.etcd_ha.security.peer_cert_auth | lower }}
{% endif -%}
{% endif -%}

# etcd Performance Configuration
{% if kubernetes_deployment.etcd_ha.performance -%}
{% if kubernetes_deployment.etcd_ha.performance.max_snapshots -%}
etcd_max_snapshots: {{ kubernetes_deployment.etcd_ha.performance.max_snapshots }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.performance.max_wals -%}
etcd_max_wals: {{ kubernetes_deployment.etcd_ha.performance.max_wals }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.performance.snapshot_count -%}
etcd_snapshot_count: {{ kubernetes_deployment.etcd_ha.performance.snapshot_count }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.performance.wal_dir -%}
etcd_wal_dir: {{ kubernetes_deployment.etcd_ha.performance.wal_dir }}
{% endif -%}
{% if kubernetes_deployment.etcd_ha.performance.data_dir -%}
etcd_data_dir: {{ kubernetes_deployment.etcd_ha.performance.data_dir }}
{% endif -%}
{% endif -%}
{% else -%}
# etcd HA disabled - using single node etcd
etcd_deployment_type: kubeadm
etcd_events_cluster_setup: false
etcd_events_cluster_enabled: false
{% endif %}

## NVIDIA Runtime Configuration
{% if kubernetes_deployment.nvidia_runtime.enabled -%}
nvidia_accelerator_enabled: {{ kubernetes_deployment.nvidia_runtime.enabled | lower }}
nvidia_driver_install_container: {{ kubernetes_deployment.nvidia_runtime.install_toolkit | default(false) | lower }}
{% if kubernetes_deployment.nvidia_runtime.architecture -%}
nvidia_container_runtime_package_architecture: {{ kubernetes_deployment.nvidia_runtime.architecture }}
{% endif -%}
{% endif %}

## Security Configuration
rbac_enabled: true
kube_encrypt_secret_data: false
kube_api_anonymous_auth: true

## Node Configuration
kubelet_max_pods: {{ kubernetes_deployment.kubelet_config.max_pods | default(110) }}
kube_read_only_port: 0

## Certificate Configuration
# TLS configuration for kubelet
tls_min_version: "VersionTLS12"

## Audit Configuration
kubernetes_audit: false

## Addons Configuration (Disabled by default - managed separately)
ingress_nginx_enabled: false
metallb_enabled: false
dashboard_enabled: false

## Firewall Configuration
{% if kubernetes_deployment.firewall.enabled -%}
# Firewall will be managed by the main deployment
firewall_enabled: false
{% endif %}

## Additional Kubespray Variables
{% if kubernetes_deployment.additional_vars -%}
{% for key, value in kubernetes_deployment.additional_vars.items() -%}
{{ key }}: {{ value }}
{% endfor -%}
{% endif %} 