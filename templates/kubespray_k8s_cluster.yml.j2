---
###############################################################################
# KUBESPRAY K8S CLUSTER CONFIGURATION - DYNAMICALLY GENERATED FROM user_input.yml
# This file is automatically generated by setup_kubernetes.sh
# Location: group_vars/k8s_cluster/k8s-cluster.yml
###############################################################################

# Basic cluster configuration
cluster_name: {{ kubernetes_deployment.cluster_name | default('cluster.local') }}

# Kubernetes version (without leading 'v' as required by Kubespray)
kube_version: {{ kubernetes_deployment.get('kubernetes_version', '1.32.5').lstrip('v') }}

# Container runtime
container_manager: {{ kubernetes_deployment.container_runtime | default('containerd') }}

# Network plugin
kube_network_plugin: {{ kubernetes_deployment.network_plugin | default('calico') }}

# Service and pod subnets
kube_service_addresses: {{ kubernetes_deployment.network_config.service_subnet | default('10.233.0.0/18') }}
kube_pods_subnet: {{ kubernetes_deployment.network_config.pod_subnet | default('10.233.64.0/18') }}
kube_network_node_prefix: {{ kubernetes_deployment.network_config.node_prefix | default(24) }}

# DNS configuration
dns_mode: {{ kubernetes_deployment.dns_mode | default('coredns') }}
dns_domain: "{{ kubernetes_deployment.cluster_name | default('cluster.local') }}"

# Load balancer configuration
{% if kubernetes_deployment.get('load_balancer', {}).get('localhost', {}).get('enabled', false) %}
loadbalancer_apiserver_localhost: true
loadbalancer_apiserver_type: {{ kubernetes_deployment.get('load_balancer', {}).get('localhost', {}).get('lb_type', 'haproxy') }}
{% set client_port = kubernetes_deployment.api_server.port | default(6443) -%}
loadbalancer_apiserver_port: {{ client_port }}
{% endif %}

# API Server endpoint for cluster discovery
# This tells secondary masters where to connect for joining the cluster
{% if kubernetes_deployment.get('load_balancer', {}).get('localhost', {}).get('enabled', false) -%}
{% set client_port = kubernetes_deployment.api_server.port | default(6443) -%}
{% set api_port_offset = kubernetes_deployment.get('load_balancer', {}).get('localhost', {}).get('api_port_offset', 1) -%}
{% set api_server_port = client_port + api_port_offset -%}
kube_apiserver_endpoint: "https://{{ kubernetes_deployment.control_plane_nodes[0].ansible_host }}:{{ api_server_port }}"
{% else -%}
kube_apiserver_endpoint: "https://{{ kubernetes_deployment.control_plane_nodes[0].ansible_host }}:{{ kubernetes_deployment.api_server.port | default(6443) }}"
{% endif %}

# API Server configuration
kube_apiserver_bind_address: "{{ kubernetes_deployment.api_server.bind_address | default('0.0.0.0') }}"
{% if kubernetes_deployment.get('load_balancer', {}).get('localhost', {}).get('enabled', false) -%}
{% set client_port = kubernetes_deployment.api_server.port | default(6443) -%}
{% set api_port_offset = kubernetes_deployment.get('load_balancer', {}).get('localhost', {}).get('api_port_offset', 1) -%}
{% set api_server_port = client_port + api_port_offset -%}
kube_apiserver_port: {{ api_server_port }}
{% else -%}
kube_apiserver_port: {{ kubernetes_deployment.api_server.port | default(6443) }}
{% endif %}

###############################################################################
# CERTIFICATE CONFIGURATION - CRITICAL FOR FIXING CERTIFICATE ERRORS
###############################################################################

## Supplementary addresses that can be added in kubernetes ssl keys.
## CRITICAL: Adding 0.0.0.0 fixes "x509: certificate is valid for ... not 0.0.0.0" error
## This list includes all possible connection addresses for the API server
supplementary_addresses_in_ssl_keys:
  - "0.0.0.0"          # Any interface - FIXES THE CERTIFICATE ERROR!
  - "127.0.0.1"        # Localhost
  - "localhost"        # Hostname
{% for node in kubernetes_deployment.control_plane_nodes %}
  - "{{ node.ansible_host }}"  # Control plane node {{ loop.index }}
{% if node.private_ip is defined and node.private_ip != node.ansible_host %}
  - "{{ node.private_ip }}"    # Control plane node {{ loop.index }} private IP
{% endif %}
{% endfor %}
{% for node in kubernetes_deployment.worker_nodes | default([]) %}
  - "{{ node.ansible_host }}"  # Worker node {{ loop.index }}
{% if node.private_ip is defined and node.private_ip != node.ansible_host %}
  - "{{ node.private_ip }}"    # Worker node {{ loop.index }} private IP
{% endif %}
{% endfor %}
{% if kubernetes_deployment.get('load_balancer', {}).get('external', {}).get('enabled', false) %}
  - "{{ kubernetes_deployment.get('load_balancer', {}).get('external', {}).get('address', '') }}"  # External load balancer
{% endif %}
{% if kubernetes_deployment.get('load_balancer', {}).get('kube_vip', {}).get('enabled', false) %}
  - "{{ kubernetes_deployment.get('load_balancer', {}).get('kube_vip', {}).get('vip_address', '') }}"  # Kube-VIP address
{% endif %}

###############################################################################
# SECURITY CONFIGURATION
###############################################################################

# RBAC
rbac_enabled: true

# TLS configuration
tls_min_version: "{{ kubernetes_deployment.get('security', {}).get('tls_min_version', 'VersionTLS12') }}"

# API server security
kube_encrypt_secret_data: {{ kubernetes_deployment.get('security', {}).get('encrypt_secrets', false) | string | lower }}
kube_api_anonymous_auth: {{ kubernetes_deployment.get('security', {}).get('anonymous_auth', true) | string | lower }}

# Audit configuration
kubernetes_audit: {{ kubernetes_deployment.get('audit', {}).get('enabled', false) | string | lower }}

###############################################################################
# NODE CONFIGURATION
###############################################################################

# Kubelet configuration
kubelet_max_pods: {{ kubernetes_deployment.get('node_config', {}).get('max_pods', 256) }}
kube_read_only_port: {{ kubernetes_deployment.get('node_config', {}).get('read_only_port', 0) }}

# Node allocatable enforcement
kubelet_enforce_node_allocatable: "{{ kubernetes_deployment.get('node_config', {}).get('enforce_allocatable', 'pods') }}"

###############################################################################
# NVIDIA GPU SUPPORT
###############################################################################

{% if kubernetes_deployment.nvidia_runtime.enabled | default(false) %}
# NVIDIA GPU acceleration
nvidia_accelerator_enabled: true
nvidia_driver_install_container: {{ kubernetes_deployment.nvidia_runtime.install_toolkit | default(true) | string | lower }}
nvidia_container_runtime_package_architecture: {{ kubernetes_deployment.nvidia_runtime.architecture | default('amd64') }}

{% if kubernetes_deployment.nvidia_runtime.gpu_nodes is defined %}
nvidia_gpu_nodes:
{% for node in kubernetes_deployment.nvidia_runtime.gpu_nodes %}
  - {{ node }}
{% endfor %}
{% endif %}

{% if kubernetes_deployment.nvidia_runtime.driver_version is defined %}
nvidia_driver_version: "{{ kubernetes_deployment.nvidia_runtime.driver_version }}"
{% endif %}

nvidia_gpu_flavor: {{ kubernetes_deployment.nvidia_runtime.gpu_flavor | default('gtx') }}
{% endif %}

###############################################################################
# STORAGE CONFIGURATION
###############################################################################

# Persistent volumes
persistent_volumes_enabled: {{ kubernetes_deployment.get('storage', {}).get('persistent_volumes', false) | string | lower }}
volume_cross_zone_attachment: {{ kubernetes_deployment.get('storage', {}).get('cross_zone_attachment', false) | string | lower }}

###############################################################################
# ETCD CONFIGURATION
###############################################################################

{% if kubernetes_deployment.get('etcd_ha', {}).get('enabled', false) %}
# etcd HA enabled
etcd_deployment_type: {{ kubernetes_deployment.get('etcd_ha', {}).get('deployment_type', 'kubeadm') }}
etcd_events_cluster_setup: {{ kubernetes_deployment.get('etcd_ha', {}).get('events_cluster', {}).get('enabled', false) | string | lower }}
etcd_events_cluster_enabled: {{ kubernetes_deployment.get('etcd_ha', {}).get('events_cluster', {}).get('enabled', false) | string | lower }}
{% else %}
# etcd HA disabled - single node etcd
etcd_deployment_type: kubeadm
etcd_events_cluster_setup: false
etcd_events_cluster_enabled: false
{% endif %}

###############################################################################
# ADDON CONFIGURATION
###############################################################################

# Core addons (disabled by default - managed separately)
ingress_nginx_enabled: false
metallb_enabled: false
dashboard_enabled: false

# Networking addons
deploy_netchecker: false

###############################################################################
# ADVANCED CONFIGURATION
###############################################################################

# Certificate auto-renewal
auto_renew_certificates: {{ kubernetes_deployment.get('certificates', {}).get('auto_renew', false) | string | lower }}

# Remove anonymous access
remove_anonymous_access: {{ kubernetes_deployment.get('security', {}).get('remove_anonymous_access', false) | string | lower }}

# Image pull policy
k8s_image_pull_policy: {{ kubernetes_deployment.get('images', {}).get('pull_policy', 'IfNotPresent') }}

# Event retention
event_ttl_duration: "{{ kubernetes_deployment.get('events', {}).get('ttl_duration', '1h0m0s') }}"

# Container runtime acceleration
{% if kubernetes_deployment.get('container_acceleration', {}).get('enabled', false) %}
kata_containers_enabled: {{ kubernetes_deployment.get('container_acceleration', {}).get('kata_containers', false) | string | lower }}
{% endif %}

###############################################################################
# CUSTOM CONFIGURATION
###############################################################################

{% if kubernetes_deployment.get('custom_config') %}
# Custom configuration from user_input.yml
{% for key, value in kubernetes_deployment.get('custom_config', {}).items() %}
{{ key }}: {{ value }}
{% endfor %}
{% endif %} 