# user_input.yml
---
# Global image pull secret settings
global_image_pull_secret:
  repository: "https://index.docker.io/v1/"
  username: ""
  password: ""

# Kubeconfig settings
global_kubeconfig: "files/kubeconfig"
global_kubecontext: "lke462675-ctx"
use_global_context: true

# Helm repository settings
use_local_charts: false
local_charts_path: "charts"
global_chart_repo_url: ""
global_repo_username: ""
global_repo_password: ""
readd_helm_repos: true

# NGC credentials can be provided via:
# 1. Environment variables (NGC_API_KEY, NGC_DOCKER_API_KEY)
# 2. Ansible vault
# 3. Direct configuration (not recommended for production)
ngc_api_key: "{{ lookup('env', 'NGC_API_KEY') }}"
ngc_docker_api_key: "{{ lookup('env', 'NGC_DOCKER_API_KEY') }}"

# Execution configuration
execution_order:
  - gpu_operator_chart
  - prometheus_stack
  - pushgateway_manifest
  - keda_chart
  - nim_operator_chart
  - create_ngc_secrets
  - verify_ngc_secrets

helm_charts:
  gpu_operator_chart:
    release_name: gpu-operator
    chart_ref: gpu-operator
    release_namespace: gpu-operator
    create_namespace: true
    wait: true
    chart_version: v25.3.0
    release_values:
      mig:
        strategy: none
      dcgm:
        enabled: true
      driver:
        enabled: false
    chart_repo_url: "https://helm.ngc.nvidia.com/nvidia"

  prometheus_stack:
    release_name: prometheus
    chart_ref: kube-prometheus-stack
    release_namespace: monitoring
    create_namespace: true
    wait: true
    chart_repo_url: "https://prometheus-community.github.io/helm-charts"
    chart_version: "55.5.0"
    release_values:
      kubeEtcd:
        enabled: false

      prometheus:
        prometheusSpec:
          retention: 15d
          additionalScrapeConfigs:
            - job_name: gpu-metrics
              scrape_interval: 1s
              metrics_path: /metrics
              scheme: http
              kubernetes_sd_configs:
                - role: endpoints
                  namespaces:
                    names:
                      - monitoring
                      - gpu-operator
              relabel_configs:
                - source_labels: [__meta_kubernetes_endpoints_name]
                  action: drop
                  regex: .*-node-feature-discovery-master
                - source_labels: [__meta_kubernetes_pod_node_name]
                  action: replace
                  target_label: kubernetes_node

      prometheusOperator:
        enabled: true
        admissionWebhooks:
          enabled: true
          patch:
            enabled: true

      kubelet:
        serviceMonitor:
          https: false

      grafana:
        enabled: true
        persistence:
          enabled: true
          size: 1Gi

      defaultRules:
        rules:
          etcd: false

  keda_chart:
    release_name: keda
    chart_ref: keda
    release_namespace: keda
    create_namespace: true
    wait: true
    chart_repo_url: "https://kedacore.github.io/charts"
    chart_version: "2.12.1"

  nim_operator_chart:
    release_name: nim
    chart_ref: k8s-nim-operator
    release_namespace: nim
    create_namespace: true
    wait: true
    chart_repo_url: "https://helm.ngc.nvidia.com/nvidia"
    chart_version: "v1.0.1"

manifests:
  pushgateway_manifest:
    name: pushgateway-setup
    manifest_file: "files/pushgateway.yaml"
    namespace: pushgateway-system
    variables:
      namespace: monitoring
    wait: true
    wait_timeout: 300
    wait_condition:
      type: Available
      status: "True"
    validate: true
    strict_validation: true

# Command execution configuration
command_exec:
  - name: "create_ngc_secrets"
    kubeconfig: "{{ global_kubeconfig }}"
    kubecontext: "{{ global_kubecontext }}"
    commands:
      # First check if secrets exist
      - cmd: |
          if kubectl --kubeconfig={{ kubeconfig | default(global_kubeconfig) }} \
            --context={{ kubecontext | default(global_kubecontext) }} \
            -n nim get secret ngc-secret >/dev/null 2>&1; then
            echo "Secret ngc-secret exists, replacing..."
            kubectl --kubeconfig={{ kubeconfig | default(global_kubeconfig) }} \
              --context={{ kubecontext | default(global_kubecontext) }} \
              -n nim delete secret ngc-secret
          fi
          kubectl --kubeconfig={{ kubeconfig | default(global_kubeconfig) }} \
            --context={{ kubecontext | default(global_kubecontext) }} \
            -n nim create secret docker-registry ngc-secret \
            --docker-server=nvcr.io \
            --docker-username='$oauthtoken' \
            --docker-password="${NGC_DOCKER_API_KEY}" \
            --docker-email='your.email@solo.io'
        env:
          NGC_DOCKER_API_KEY: "{{ ngc_docker_api_key }}"
          KUBECONFIG: "{{ kubeconfig | default(global_kubeconfig) }}"
      
      # Handle ngc-api-secret
      - cmd: |
          if kubectl --kubeconfig={{ kubeconfig | default(global_kubeconfig) }} \
            --context={{ kubecontext | default(global_kubecontext) }} \
            get secret ngc-api-secret -n nim >/dev/null 2>&1; then
            echo "Secret ngc-api-secret exists, replacing..."
            kubectl --kubeconfig={{ kubeconfig | default(global_kubeconfig) }} \
              --context={{ kubecontext | default(global_kubecontext) }} \
              delete secret ngc-api-secret -n nim
          fi
          kubectl --kubeconfig={{ kubeconfig | default(global_kubeconfig) }} \
            --context={{ kubecontext | default(global_kubecontext) }} \
            create secret generic ngc-api-secret -n nim\
            --from-literal=NGC_API_KEY="${NGC_API_KEY}"
        env:
          NGC_API_KEY: "{{ ngc_api_key }}"
          KUBECONFIG: "{{ kubeconfig | default(global_kubeconfig) }}" 

  - name: "verify_ngc_secrets"
    commands:
      - cmd: "kubectl get secret ngc-secret -n nim -o jsonpath={.metadata.name} --kubeconfig={{ global_kubeconfig }} --context={{ global_kubecontext }}"
        env:
          KUBECONFIG: "{{ global_kubeconfig }}"
          KUBECONTEXT: "{{ global_kubecontext }}"
        ignore_errors: true
      - cmd: "kubectl get secret ngc-api-secret -n nim -o jsonpath={.metadata.name} --kubeconfig={{ global_kubeconfig }} --context={{ global_kubecontext }}"
        env:
          KUBECONFIG: "{{ global_kubeconfig }}"
          KUBECONTEXT: "{{ global_kubecontext }}"
        ignore_errors: true 

