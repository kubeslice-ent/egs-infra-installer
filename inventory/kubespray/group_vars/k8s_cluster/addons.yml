---
# Kubernetes dashboard
# RBAC required. see docs/getting-started.md for access details.
# dashboard_enabled: false

# Helm deployment
helm_enabled: true

# Registry deployment
registry_enabled: false
# registry_namespace: kube-system
# registry_storage_class: ""
# registry_disk_size: "10Gi"

# Metrics Server deployment
metrics_server_enabled: true
# metrics_server_container_port: 10250
# metrics_server_kubelet_insecure_tls: true
# metrics_server_metric_resolution: 15s
# metrics_server_kubelet_preferred_address_types: "InternalIP,ExternalIP,Hostname"
# metrics_server_host_network: false
# metrics_server_replicas: 1

# Rancher Local Path Provisioner
local_path_provisioner_enabled: true
# local_path_provisioner_namespace: "local-path-storage"
# local_path_provisioner_storage_class: "local-path"
# local_path_provisioner_reclaim_policy: Delete
# local_path_provisioner_claim_root: /opt/local-path-provisioner/
# local_path_provisioner_debug: false
# local_path_provisioner_image_repo: "{{ docker_image_repo }}/rancher/local-path-provisioner"
# local_path_provisioner_image_tag: "v0.0.24"
# local_path_provisioner_helper_image_repo: "busybox"
# local_path_provisioner_helper_image_tag: "latest"

# Local volume provisioner deployment
local_volume_provisioner_enabled: false
# local_volume_provisioner_namespace: kube-system
# local_volume_provisioner_nodelabels:
#   - kubernetes.io/hostname
#   - topology.kubernetes.io/region
#   - topology.kubernetes.io/zone
# local_volume_provisioner_storage_classes:
#   local-storage:
#     host_dir: /mnt/disks
#     mount_dir: /mnt/disks
#     volume_mode: Filesystem
#     fs_type: ext4
#   fast-disks:
#     host_dir: /mnt/fast-disks
#     mount_dir: /mnt/fast-disks
#     block_cleaner_command:
#       - "/scripts/shred.sh"
#       - "2"
#     volume_mode: Filesystem
#     fs_type: ext4
# local_volume_provisioner_tolerations:
#   - effect: NoSchedule
#     operator: Exists

# CSI Volume Snapshot Controller deployment, set this to true if your CSI is able to manage snapshots
# currently, setting cinder_csi_enabled=true would automatically enable the snapshot controller
# Longhorn is an external CSI that would also require setting this to true but it is not included in kubespray
# csi_snapshot_controller_enabled: false
# csi snapshot namespace
# snapshot_controller_namespace: kube-system

# Gateway API CRDs
gateway_api_enabled: false

# Nginx ingress controller deployment
ingress_nginx_enabled: "{{ kubernetes_deployment.addons.ingress_nginx_enabled | default(false) }}"
ingress_nginx_host_network: false
ingress_nginx_service_type: "{{ kubernetes_deployment.addons.ingress_nginx_controller_service_type | default('LoadBalancer') }}"
ingress_nginx_service_annotations: "{{ kubernetes_deployment.addons.ingress_nginx_controller_service_annotations | default({}) }}"
# ingress_nginx_service_nodeport_http: 30080
# ingress_nginx_service_nodeport_https: 30081
ingress_publish_status_address: ""
# ingress_nginx_nodeselector:
#   kubernetes.io/os: "linux"
ingress_nginx_tolerations: "{{ kubernetes_deployment.addons.ingress_nginx_controller_tolerations | default([{'key': 'node-role.kubernetes.io/control-plane', 'operator': 'Equal', 'value': '', 'effect': 'NoSchedule'}]) }}"
ingress_nginx_namespace: "{{ kubernetes_deployment.addons.ingress_nginx_namespace | default('ingress-nginx') }}"
ingress_nginx_insecure_port: 80
ingress_nginx_secure_port: 443
ingress_nginx_configmap: "{{ kubernetes_deployment.addons.ingress_nginx_configmap | default({'map-hash-bucket-size': '128', 'ssl-protocols': 'TLSv1.2 TLSv1.3'}) }}"
ingress_nginx_configmap_tcp_services: "{{ kubernetes_deployment.addons.ingress_nginx_configmap.get('tcp-services', {}) }}"
ingress_nginx_configmap_udp_services: "{{ kubernetes_deployment.addons.ingress_nginx_configmap.get('udp-services', {}) }}"
ingress_nginx_extra_args: "{{ kubernetes_deployment.addons.ingress_nginx_controller_extra_args | default([]) }}"
ingress_nginx_termination_grace_period_seconds: 300
ingress_nginx_class: nginx
ingress_nginx_without_class: true
ingress_nginx_default: false
ingress_nginx_controller_kind: "{{ kubernetes_deployment.addons.ingress_nginx_controller_kind | default('DaemonSet') }}"
ingress_nginx_controller_daemonset_enable: "{{ true if kubernetes_deployment.addons.ingress_nginx_controller_kind == 'DaemonSet' else false }}"
ingress_nginx_controller_replicas: "{{ kubernetes_deployment.addons.ingress_nginx_controller_replicas | default(1) }}"
ingress_nginx_controller_hostport_enabled: "{{ kubernetes_deployment.addons.ingress_nginx_controller_hostport_enabled | default(true) }}"
ingress_nginx_controller_metrics_enabled: "{{ kubernetes_deployment.addons.ingress_nginx_controller_metrics_enabled | default(true) }}"
ingress_nginx_controller_service_monitor: "{{ kubernetes_deployment.addons.ingress_nginx_controller_service_monitor | default(true) }}"
ingress_nginx_controller_resources: "{{ kubernetes_deployment.addons.ingress_nginx_controller_resources | default({'requests': {'cpu': '100m', 'memory': '256Mi'}, 'limits': {'cpu': '300m', 'memory': '512Mi'}}) }}"
ingress_nginx_controller_config: "{{ kubernetes_deployment.addons.ingress_nginx_controller_config | default({}) }}"
ingress_nginx_controller_extra_env: "{{ kubernetes_deployment.addons.ingress_nginx_controller_extra_env | default([]) }}"

# ALB ingress controller deployment
ingress_alb_enabled: false
# alb_ingress_aws_region: "us-east-1"
# alb_ingress_restrict_scheme: "false"
# Enables logging on all outbound requests sent to the AWS API.
# If logging is desired, set to true.
# alb_ingress_aws_debug: "false"

# Cert manager deployment
cert_manager_enabled: false
# cert_manager_namespace: "cert-manager"
# cert_manager_tolerations:
#   - key: node-role.kubernetes.io/control-plane
#     effect: NoSchedule
# cert_manager_affinity:
#  nodeAffinity:
#    preferredDuringSchedulingIgnoredDuringExecution:
#    - weight: 100
#      preference:
#        matchExpressions:
#        - key: node-role.kubernetes.io/control-plane
#          operator: In
#          values:
#          - ""
# cert_manager_nodeselector:
#   kubernetes.io/os: "linux"

# cert_manager_trusted_internal_ca: |
#   -----BEGIN CERTIFICATE-----
#   [REPLACE with your CA certificate]
#   -----END CERTIFICATE-----
# cert_manager_leader_election_namespace: kube-system

# cert_manager_dns_policy: "ClusterFirst"
# cert_manager_dns_config:
#   nameservers:
#     - "1.1.1.1"
#     - "8.8.8.8"

# cert_manager_controller_extra_args:
#   - "--dns01-recursive-nameservers-only=true"
#   - "--dns01-recursive-nameservers=1.1.1.1:53,8.8.8.8:53"

# MetalLB deployment
metallb_enabled: "{{ kubernetes_deployment.addons.metallb_enabled | default(false) }}"
metallb_speaker_enabled: "{{ kubernetes_deployment.addons.metallb_speaker_enabled | default(metallb_enabled) }}"
metallb_namespace: "{{ kubernetes_deployment.addons.metallb_namespace | default('metallb-system') }}"
metallb_protocol: "{{ kubernetes_deployment.addons.metallb_protocol | default('layer2') }}"
metallb_port: "{{ kubernetes_deployment.addons.metallb_port | default('7472') }}"
metallb_memberlist_port: "{{ kubernetes_deployment.addons.metallb_port | default('7946') }}"
metallb_version: "{{ kubernetes_deployment.addons.metallb_version | default('v0.13.12') }}"
metallb_auto_assign: "{{ kubernetes_deployment.addons.metallb_auto_assign | default(true) }}"
metallb_pool_name: "{{ kubernetes_deployment.addons.metallb_pool_name | default('default') }}"
metallb_limits_cpu: "{{ kubernetes_deployment.addons.metallb_limits_cpu | default('100m') }}"
metallb_limits_mem: "{{ kubernetes_deployment.addons.metallb_limits_mem | default('100Mi') }}"
metallb_controller_enabled: "{{ kubernetes_deployment.addons.metallb_controller_enabled | default(true) }}"
metallb_config:
  speaker:
    nodeselector:
      kubernetes.io/os: "linux"
    tolerations: "{{ kubernetes_deployment.addons.metallb_speaker_tolerations | default([{'key': 'node-role.kubernetes.io/control-plane', 'operator': 'Equal', 'value': '', 'effect': 'NoSchedule'}]) }}"
    resources:
      limits:
        cpu: "{{ metallb_limits_cpu }}"
        memory: "{{ metallb_limits_mem }}"
  controller:
    nodeselector:
      kubernetes.io/os: "linux"
    tolerations: "{{ kubernetes_deployment.addons.metallb_speaker_tolerations | default([{'key': 'node-role.kubernetes.io/control-plane', 'operator': 'Equal', 'value': '', 'effect': 'NoSchedule'}]) }}"
  address_pools: "{{ kubernetes_deployment.addons.metallb_address_pools | default({'primary': {'ip_range': ['10.5.0.0/16'], 'auto_assign': true}}) }}"
  layer2: "{{ kubernetes_deployment.addons.metallb_address_pools.keys() | list if kubernetes_deployment.addons.metallb_protocol == 'layer2' else ['primary'] }}"

argocd_enabled: false
# argocd_namespace: argocd
# Default password:
#   - https://argo-cd.readthedocs.io/en/stable/getting_started/#4-login-using-the-cli
#   ---
#   The initial password is autogenerated and stored in `argocd-initial-admin-secret` in the argocd namespace defined above.
#   Using the argocd CLI the generated password can be automatically be fetched from the current kubectl context with the command:
#   argocd admin initial-password -n argocd
#   ---
# Use the following var to set admin password
# argocd_admin_password: "password"

# The plugin manager for kubectl

# Kube VIP
kube_vip_enabled: false
# kube_vip_arp_enabled: true
# kube_vip_controlplane_enabled: true
# kube_vip_address: 192.168.56.120
# loadbalancer_apiserver:
#   address: "{{ kube_vip_address }}"
#   port: 6443
# kube_vip_interface: eth0
# kube_vip_services_enabled: false
# kube_vip_dns_mode: first
# kube_vip_cp_detect: false
# kube_vip_leasename: plndr-cp-lock
# kube_vip_enable_node_labeling: false
# kube_vip_lb_fwdmethod: local

# Node Feature Discovery
node_feature_discovery_enabled: false
# node_feature_discovery_gc_sa_name: node-feature-discovery
# node_feature_discovery_gc_sa_create: false
# node_feature_discovery_worker_sa_name: node-feature-discovery
# node_feature_discovery_worker_sa_create: false
# node_feature_discovery_master_config:
#   extraLabelNs: ["nvidia.com"]
