# Kubernetes Inventory Configuration
# This inventory describes a HA topology with stacked etcd (same nodes as control plane)
# and separate worker nodes
# See https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html

# Configure 'ip' variable to bind kubernetes services on a different ip than the default iface
# We should set etcd_member_name for etcd cluster. The node that are not etcd members do not need to set the value,
# or can set the empty string value.

[all]
{% for node in control_plane_nodes %}
{{ node.name }} ansible_host={{ node.ansible_host }} ansible_user={{ node.ansible_user | default(default_ansible_user) }} ansible_ssh_private_key_file={{ ssh_key_path }} ansible_python_interpreter={{ kubernetes_deployment.python_config.interpreter_path | default('/usr/bin/python3') }} ansible_become=true ansible_become_method=sudo ansible_become_user=root ansible_become_flags="-S --preserve-env" ansible_become_pass="{{ kubernetes_deployment.ansible_sudo_pass | default(node.ansible_user) | default(default_ansible_user) }}" access_ip={{ node.private_ip }}
{% endfor %}
{% for node in worker_nodes | default([]) %}
{{ node.name }} ansible_host={{ node.ansible_host }} ansible_user={{ node.ansible_user | default(default_ansible_user) }} ansible_ssh_private_key_file={{ ssh_key_path }} ansible_python_interpreter={{ kubernetes_deployment.python_config.interpreter_path | default('/usr/bin/python3') }} ansible_become=true ansible_become_method=sudo ansible_become_user=root ansible_become_flags="-S --preserve-env" ansible_become_pass="{{ kubernetes_deployment.ansible_sudo_pass | default(node.ansible_user) | default(default_ansible_user) }}" access_ip={{ node.private_ip }}
{% endfor %}

# Global Variables
[all:vars]
# SSH configuration
ansible_ssh_extra_args="-o StrictHostKeyChecking=no"
ansible_become=true
ansible_become_method=sudo
ansible_become_user=root
ansible_become_flags="-S --preserve-env"

# Control Plane Configuration (Masters)
[kube_control_plane]
{% for node in control_plane_nodes %}
{{ node.name }} ansible_host={{ node.ansible_host }}{% if node.private_ip %} ip={{ node.private_ip }}{% endif %} etcd_member_name=etcd{{ loop.index }}
{% endfor %}

# etcd Configuration - Stacked etcd (runs on control plane nodes)
[etcd:children]
kube_control_plane

# Node Configuration (Workers + Masters if no dedicated workers)
[kube_node]
{% if worker_nodes | default([]) | length > 0 %}
{# Dedicated worker nodes exist, don't include masters as workers #}
{% for node in worker_nodes %}
{{ node.name }} ansible_host={{ node.ansible_host }}{% if node.private_ip %} ip={{ node.private_ip }}{% endif %}
{% endfor %}
{% else %}
{# No dedicated workers, masters also act as workers #}
{% for node in control_plane_nodes %}
{{ node.name }}
{% endfor %}
{% endif %}

# Cluster Groups
[k8s_cluster:children]
kube_control_plane
kube_node

[calico_rr]

# Kubernetes Cluster Variables
[k8s_cluster:vars]
# Network plugin configuration
kube_network_plugin="{{ kubernetes_deployment.network_plugin | default('calico') }}"

# Container runtime configuration
container_manager="{{ kubernetes_deployment.container_runtime | default('containerd') }}"

# DNS configuration
dns_mode="{{ kubernetes_deployment.dns_mode | default('coredns') }}"

# Network configuration
kube_service_addresses="{{ kubernetes_deployment.network_config.service_subnet | default('10.233.0.0/18') }}"
kube_pods_subnet="{{ kubernetes_deployment.network_config.pod_subnet | default('10.233.64.0/18') }}"
kube_network_node_prefix={{ kubernetes_deployment.network_config.node_prefix | default(24) }}

# API Server Configuration
kube_apiserver_ip="{{ kubernetes_deployment.api_server.host }}"
{% if kubernetes_deployment.load_balancer.type == "external" and kubernetes_deployment.load_balancer.external.enabled %}
apiserver_loadbalancer_domain_name="{{ kubernetes_deployment.load_balancer.external.domain_name | default(kubernetes_deployment.load_balancer.external.address) }}"
loadbalancer_apiserver='{"address":"{{ kubernetes_deployment.load_balancer.external.address }}","port":{{ kubernetes_deployment.load_balancer.external.port | default(6443) }}}'
{% elif kubernetes_deployment.load_balancer.type == "kube-vip" and kubernetes_deployment.load_balancer.kube_vip.enabled %}
apiserver_loadbalancer_domain_name="{{ kubernetes_deployment.load_balancer.kube_vip.vip_address }}"
loadbalancer_apiserver='{"address":"{{ kubernetes_deployment.load_balancer.kube_vip.vip_address }}","port":{{ kubernetes_deployment.api_server.port | default(6443) }}}'
{% endif %}

# SSL Configuration - Certificate Subject Alternative Names (SAN)
# Now configured in group_vars/all/all.yml for proper precedence

# Additional Kubernetes Configuration
{% if kubernetes_deployment.additional_vars is defined %}
{% for key, value in kubernetes_deployment.additional_vars.items() %}
{{ key }}={{ value }}
{% endfor %}
{% endif %}

# NVIDIA Configuration
{% if kubernetes_deployment.nvidia_runtime.enabled | default(false) %}
nvidia_accelerator_enabled={{ kubernetes_deployment.nvidia_runtime.enabled | string | lower }}
nvidia_driver_install_container={{ kubernetes_deployment.nvidia_runtime.install_toolkit | string | lower }}
nvidia_container_runtime_package_architecture="{{ kubernetes_deployment.nvidia_runtime.architecture | default('amd64') }}"
{% endif %} 
